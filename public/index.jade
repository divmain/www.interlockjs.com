header.landing
  .logo-wrapper
    include _assets/interlock-logo.svg

  .landing-header
    h1 Interlock.js
    p.subtitle Unify your build.
    a.cta Get Started
    a.cta(href="//github.com/interlockjs/interlock") Open on GitHub


section
  .content
    h2 A build tool for universal javascript and beyond.

    .bullet-points
      .bullet-point
        .illustration
          include _assets/first-class.svg
        h3
          | First-class
          br
          | CSS and HTML
        .blurb lorem ipsum
      .bullet-point
        .illustration
          include _assets/universal.svg
        h3 Universal
        .blurb Clean Node.js builds, feature parity with browser builds.
      .bullet-point
        .illustration
          include _assets/future-readiness.svg
        h3 Future ready
        .blurb
          | With 
          a(href="https://github.com/interlockjs/plugins/tree/master/packages/h2") rich support for HTTP/2
          |, Interlock won't restrict you to old deployment paradigms for your SPA.
      .bullet-point
        .illustration
          include _assets/extensibility.svg
        h3 Easily extensible
        .blurb A simple and straightforward plugin system.
      .bullet-point
        .illustration
          include _assets/interoperate.svg
        h3 Interoperable
        .blurb
          | No need to give up on your current toolset! Interlock supports 
          a(href="https://github.com/interlockjs/plugins/tree/master/packages/webpack-loaders") Webpack loaders 
          | and 
          a(href="https://github.com/interlockjs/plugins/tree/master/packages/browserify-transforms") Browserify transforms
          |, and integrates with the Webpack and 
          a(href="https://github.com/interlockjs/plugins/tree/master/packages/requirejs-interop") Require.js 
          | runtimes.
      .bullet-point
        .illustration
          include _assets/grows-with-you.svg
        h3 Grows with you
        .blurb Its module system allows you to share code across teams and builds, cutting down on huge, monolithic builds. A seamless experience, whether you're a team of two or a team of two hundred.


section.glass
  .content
    h2 Friendly

    .split
      .block
        :markdown
          Interlock fully embraces the [Zen of Python](https://www.python.org/doc/humor/#the-zen-of-python), both for internal implementation and for all developer-facing tools and interfaces.

          All core [compilation options](/docs/options) can be set through command-line flags.  When command-line flags turn cumbersome, Interlock provides a rich JS API and configuration format.

      .block.fit
        pre.console.
          $ ilk build --help

          Options:
            --verbose, -v   Compiler verbosity (sent to STDOUT).          [count]
            --config, -c    Path to Interlock config file.                [string]
            --preset        Pull in pre-determined Interlock configuration
                            options.                                      [string]
            --help          Show help                                     [boolean]
            --src           Path to source directory.                     [string]
            --dest          Path to output directory.                     [string]
            --entry, -e     Your application entry point, followed by its output
                            bundle filename.                              [string]
            --split, -s     Your application split point, followed by its output
                            bundle filename.                              [string]
            --ext           Extensions to use for require() resolution.   [string]
            --namespace     Namespace to use for your project.            [string]

          [...]


section
  .content
    h2 Powerful extensibility
    :markdown
      The core of Interlock is very small - many features that Interlock provides are implemented as plugins.  All compilation steps are [fully documented](/docs/extensibility) with an exploratory interface, and plugins tend to be short and sweet.

    .split
      .block
        :markdown
          Interlock makes no distinction between "loaders" and "plugins".  Ultimately, both effect the output of the build, and a separate   And with other tools, the line has often become rather blurry, in practice.
        .container
          a.cta Developer documentation
          a.cta Example plugins

      .block.fit
        pre.console.
          export default function (opts = {}) {
            const isJsonFile = opts.filter || /\.json$/;
            return (override, transform) => {
              transform("readSource", module => {
                if (isJsonFile.test(module.path)) {
                  module = Object.assign({}, module, {
                    rawSource: `module.exports = ${module.rawSource};`
                  });
                }
                return module;
              });
            };
          }

    .pull-right


section.glass

section
  .content
    :markdown
      ## Getting Started

      getting started, bacon ipsum, etc etc etc

      **Interlock is a bundler and build pipeline for the modern web.**

      - modularity
      - comprehensibility
      - extensibility
      - support for HTTP/2 server push
      - tree shaking
      - CSS as a first-class citizen (no more extract-text-plugin)
      - powerful dev server
      - CDN that is wired up to NPM (and cached)
      - flexible bundling - use the bundling scheme that works best for you. by default uses similar bundling scheme as [StealJS](http://stealjs.com/docs/index.html)

      It provides first-class support for ECMAScript via Babel and CSS via PostCSS.  Its module system promotes modularity at any level of granularity, without sacrificing performance, accommodating teams of two or teams of two hundred.

      It aims to be comprehensible and extensible through plugins.


section.why-interlock.glass
  .content
    :markdown
      ## Why Interlock?



