section.glass.heading
  h1 Extensibility

section
  .content
    :markdown
      - [Internal Architecture](#internal-architecture)
        - [Pluggable Functions](#pluggable-functions)
        - [Intermediate Formats](#intermediate-formats)
        - [Babel](#babel)
        - [Tips](#tips)
      - [Definition of Terms](#definition-of-terms)
      - [Writing a Plugin](#writing-a-plugin)
      - [Compilation Pluggables](#compilation-pluggables)
      - [Plugin Context](#plugin-context)
      - [Changing Run-time Behavior](#changing-runtime-behavior)
      - [Data Structures](#data-structures)
      - [Learn More](#learn-more)

section.glass

section#internal-architecture
  .content
    h2 Internal Architecture
    :markdown
      ### Pluggable Functions

       Interlock's compilation is built on pluggable functions.

      Pluggable functions are like pure functions, taking inputs, delegating certain computations to other functions (often pluggables), and returning an input.  However, there are a few fundamental differences.

      - Each function is wrapped in a `pluggable` call at its point of definition, and its dependencies are explicitly defined.
      - Pluggable functions expect a special `this` context when invoked.  This context is constructed for and passed into the top-level pluggable function (normally the `compile` pluggable).  The context is then made available to the top-level pluggable's dependencies, their dependencies, and so on.
      - Interlock allows you to override or transform the behavior and output of any of the pluggables that are defined.
      - Pluggable functions are asynchronous by nature.  They all resolve to a promise under the hood.  This applies both to the default functionality, as well as any functionality that a plugin might define.

      In essence, compilation is comprised of a hierarchy of function calls.  These function calls behave as extension points, where their output and behavior can be overridden or transformed, either synchronously or asynchronously.

      To dig deeper:

      - Read through the Pluggable [README](https://github.com/interlockjs/pluggable#pluggable).
      - [Browse through](#compilation-pluggables) the pluggable functions that Interlock provides.
      - [Learn how](#writing-a-plugin) to override one of Interlock's pluggables.

      ### Intermediate Formats

      Interlock tries to pair a piece of data with its ideal structure.

      In the case of JavaScript, this means that AST is used to represent code from the point of parsing until bundle-code and sourcemaps are generated.  The CSS plugin treats CSS similarly, using PostCSS's AST format.

      In general, strings should be avoided unless they are the obvious choice.  For example, a bundle's code must ultimately be a string or a buffer in order to be written to a file.  Because Babel's generator outputs a string, we will transform AST to string at the very end of compilation.


      ### Babel

      Interlock relies on Babel for code parsing, transformation, and generation.  Some efforts are underway to optimize and provide potentially better-performing alternatives.  However, Babel is the most significant dependency that Interlock takes.

      Babel itself is split into several packages, which are mostly maintained [here](https://github.com/babel/babel/tree/master/packages).  Each Babel package has its own README and test suite.  If you need to understand more about how Interlock consumes Babel packages, the READMEs and tests are a good place to start.  There are also several active channels in [Babel's Slack community](https://slack.babeljs.io/);


      ### Tips

      Although it is not enforced, it is recommended to treat all input/output data-structures as immutable.  For example, a method that returns a module with a new prop will usually be written as `assign({}, module, { newProp })`.


section.glass

section#definition-of-terms
  .content
    h2 Definition of Terms
    table
      thead
        td Term
        td Definition
        td Links

      tbody
        tr
          td AST
          td Abstract syntax tree.  This is a hierarchical tree data-structure.  Each node in the AST has a type, and each node type corresponds with a particular node shape.  Meta-data about the node is also stored, including code location and comments.
          td
            a(href="https://astexplorer.net/") AST Explorer


section.glass#writing-a-plugin
  .content
    h2 Writing a Plugin

    pre.console.standalone
      code(class="language-javascript").
        // Your plugin module should export a higher-order function.
        // This function should accept as input an options object
        // (this can be whatever you like), and return another
        // function that closes over those options.
        export default function (opts = {}) {

          // By convention, your exported function will be invoked
          // once, when your Interlock config file is evaluated.
          // Computations for which you already have all required
          // information should happen here.
          const someComputedOption = someComputation(opts);

          // The function you return here will be invoked at the
          // beginning of each compilation.  It will be passed
          // `override` and `transform` functions that you can
          // use to effect compilation behavior.
          return (override, transform) => {

            // If you want to override a compilation step:
            override("PLUGGABLE_NAME", input => {
              // If you want to skip your override, you can always...
              return override.CONTINUE;

              // Otherwise, do your computations here and...
              return someOutput;

              // If your behavior is asynchronous you can always...
              return Promise.resolve(someOutput);
            })

            // If instead you want to transform the default output:
            transform("PLUGGABLE_NAME", pluggableOutput => {
              // and ...
              return modifiedPluggableOutput;

              // Like `override`, you can always...
              return Promise.resolve(modifiedPluggableOutput);
            });
          };
        }


section.glass.interactive#compilation-pluggables
  .interactive-docs
    .visualization
      svg(viewbox="0 0 700 350")


section.interactive
  .interactive-docs
    .status-bar-wrapper
      div
        span.ion-arrow-left-c &nbsp;
        span Start of Computation
      .status &nbsp;
      div
        span End of computation&nbsp;
        span.ion-arrow-right-c
    .doc-wrapper
      .breadcrumb
      .doc
        :markdown
          **This tool is a visual representation of the entire compilation process.**  Each arc above corresponds with a step of compilation; a pluggable.  Arcs closer to the center point are higher-level calculations, and are composed of the adjacent arcs the next level out.  Arcs on the outside have no pluggable dependencies.

          As you hover over arcs, the name of the pluggable will be displayed.  **If you click on an arc, the visualization will zoom in** and give you detailed information about that compilation step.  To navigate back up the call stack, click the semi-circle at the center of the graph.


script(src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js")
script(src="https://cdnjs.cloudflare.com/ajax/libs/markdown-it/4.4.0/markdown-it.js")
script(src="/docs/js/interactive-docs-visualization.js")


section.glass


section#plugin-context
  .content
    h2 Plugin Context

    .split
      .block
        :markdown
          If you're overriding step A, and A normally calls B, C, and D, you may want to do the same when you override.

          This can be accomplished simply by invoking those function names on `this`.

      .block.fit
        pre.console
          code(class="language-javascript").
            override("pluggableA", function (inputA) {
              return this.pluggableB()
                .then(() => this.pluggableC())
                .then(() => this.pluggableD());
            });

    .side-note
      i.sigil.ion-alert
      :markdown
        **REMEMBER**  You'll often see arrow functions passed to `override` or `transform`.  This is a great short-hand.  However, keep in mind that arrow functions borrow their lexical scope's `this` context.  If you expect to have access to `this.someMethod()` and it isn't there, check to see if you're using an arrow function.

    .split
      .block
        :markdown
          You may also want to access the Interlock compilation options.  These options are also accessible on the function context.

      .block.fit
        pre.console
          code(class="language-javascript").
            override("PLUGGABLE_NAME", function (inputA) {
              if (this.opts.someOption) {
                return "someValue";
              } else {
                return "someOtherValue";
              }
            });


section.glass


section#changing-runtime-behavior
  .content
    h2 Run-time behavior
    :markdown
      TODO


section.glass#data-structures
  .content
    h2 Data Structures
    :markdown
      TODO
      - modules
      - bundles


section.glass


section#learn-more
  .content
    h2 Learn More
    :markdown
      TODO
      - reach out in Gitter channel
      - look over the cookbook examples
      - read through the offical plugins
